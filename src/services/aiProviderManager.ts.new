import { AIProvider } from '../../types/aiProvider';
import { OpenAIProvider } from './providers/openaiProvider';
import { GeminiProvider } from './providers/geminiProvider';
import { HuggingFaceProvider } from './providers/huggingfaceProvider';

interface ImportMetaEnv {
  VITE_GEMINI_API_KEY?: string;
  VITE_OPENAI_API_KEY?: string;
  VITE_HUGGINGFACE_API_KEY?: string;
  [key: string]: string | undefined;
}

class DummyProvider implements AIProvider {
  async generateText(prompt: string): Promise<string> {
    return "AI features are currently disabled. Please try again later.";
  }
  isAvailable(): boolean {
    return false;
  }
}

export class AIProviderManager {
  private static instance: AIProviderManager | null = null;
  private providers: AIProvider[] = [new DummyProvider()];
  private isInitialized = false;

  private constructor() {}

  public static getInstance(): AIProviderManager {
    if (!this.instance) {
      this.instance = new AIProviderManager();
    }
    return this.instance;
  }

  private getEnvVars(): ImportMetaEnv {
    try {
      // @ts-ignore - Vite's import.meta.env exists at runtime
      return typeof import.meta !== 'undefined' ? import.meta.env : {};
    } catch {
      console.warn('Unable to access import.meta.env');
      return {};
    }
  }

  public initialize(): boolean {
    if (this.isInitialized) return this.providers.some(p => !(p instanceof DummyProvider));

    try {
      console.log('Initializing AI providers...');
      const env = this.getEnvVars();

      // Reset providers to just the dummy provider
      this.providers = [new DummyProvider()];
      
      let hasInitializedProvider = false;

      if (typeof env.VITE_GEMINI_API_KEY === 'string' && env.VITE_GEMINI_API_KEY.length > 0) {
        try {
          this.providers.push(new GeminiProvider(env.VITE_GEMINI_API_KEY));
          hasInitializedProvider = true;
          console.log('Gemini provider initialized successfully');
        } catch (e) {
          console.warn('Failed to initialize Gemini provider:', e);
        }
      } else {
        console.warn('No Gemini API key found');
      }

      if (typeof env.VITE_OPENAI_API_KEY === 'string' && env.VITE_OPENAI_API_KEY.length > 0) {
        try {
          this.providers.push(new OpenAIProvider(env.VITE_OPENAI_API_KEY));
          hasInitializedProvider = true;
          console.log('OpenAI provider initialized successfully');
        } catch (e) {
          console.warn('Failed to initialize OpenAI provider:', e);
        }
      } else {
        console.warn('No OpenAI API key found');
      }

      if (typeof env.VITE_HUGGINGFACE_API_KEY === 'string' && env.VITE_HUGGINGFACE_API_KEY.length > 0) {
        try {
          this.providers.push(new HuggingFaceProvider(env.VITE_HUGGINGFACE_API_KEY));
          hasInitializedProvider = true;
          console.log('HuggingFace provider initialized successfully');
        } catch (e) {
          console.warn('Failed to initialize HuggingFace provider:', e);
        }
      } else {
        console.warn('No HuggingFace API key found');
      }

      if (!hasInitializedProvider) {
        console.warn('No AI providers could be initialized. AI features will be disabled.');
      }

      this.isInitialized = true;
      return hasInitializedProvider;
    } catch (error) {
      console.error('AI providers initialization failed:', error);
      this.isInitialized = true;
      return false;
    }
  }

  public async generateText(prompt: string): Promise<string> {
    if (!this.isInitialized) {
      this.initialize();
    }

    const availableProviders = this.providers.filter(p => !(p instanceof DummyProvider));
    
    if (availableProviders.length === 0) {
      return "AI features are currently disabled. Please check your environment variables and try again later.";
    }

    for (const provider of availableProviders) {
      try {
        if (provider.isAvailable()) {
          return await provider.generateText(prompt);
        }
      } catch (error) {
        console.error('Provider failed:', error);
        continue;
      }
    }

    return "All AI providers failed. Please try again later.";
  }

  public isAvailable(): boolean {
    return this.providers.some(p => !(p instanceof DummyProvider) && p.isAvailable());
  }
}
