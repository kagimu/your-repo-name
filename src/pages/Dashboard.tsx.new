import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { motion } from 'framer-motion';
import { jsPDF } from "jspdf";
import { autoTable } from 'jspdf-autotable';
import {
  ShoppingBag,
  TrendingUp,
  Award,
  Bell,
  Settings,
  User,
  CreditCard,
  LogOut,
  X,
  Download,
  Eye
} from 'lucide-react';
import { Navbar } from '@/components/layout/Navbar';
import { toast } from 'react-toastify';
import { CustomCursor } from '@/components/CustomCursor';
import { EdumallButton } from '@/components/ui/EdumallButton';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';

// Types and Interfaces
interface OrderItem {
  id: number;
  product: {
    id: number;
    name: string;
  };
  quantity: number;
  price: number;
}

interface Order {
  id: number;
  created_at: string;
  payment_status: string;
  total: number;
  items: OrderItem[];
}

interface DashboardStats {
  total_orders: number;
  orders_change: number;
  pending_deliveries: number;
  deliveries_change: number;
  badges_earned: number;
  badges_change: number;
  notifications: number;
  notifications_change: number;
}

interface ApiResponse {
  orders?: Order[];
  data?: Order[];
  status: number;
  message: string;
  order?: {
    payment_status: string;
  };
}

interface DashboardStat {
  label: string;
  value: number;
  change: number | string;
  positive: boolean;
  icon: LucideIcon;
}

type LucideIcon = React.ForwardRefExoticComponent<React.SVGProps<SVGSVGElement> & { title?: string, size?: number | string }>;

// Sidebar configuration
const sidebarItems = [
  { id: 'overview', label: 'Overview', icon: TrendingUp },
  { id: 'orders', label: 'Orders', icon: ShoppingBag },
  { id: 'badges', label: 'Badges', icon: Award },
  { id: 'profile', label: 'Profile', icon: User },
  { id: 'settings', label: 'Settings', icon: Settings },
  { id: 'billing', label: 'Billing', icon: CreditCard }
];

// Main Dashboard Component
const Dashboard: React.FC = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  
  // All your existing state declarations
  const [stats, setStats] = useState<DashboardStat[]>([
    {
      label: 'Total Orders',
      value: 0,
      change: '0%',
      positive: true,
      icon: ShoppingBag
    },
    {
      label: 'Pending Deliveries',
      value: 0,
      change: '0',
      positive: true,
      icon: TrendingUp
    },
    {
      label: 'Badges Earned',
      value: 0,
      change: '0',
      positive: true,
      icon: Award
    },
    {
      label: 'Notifications',
      value: 0,
      change: '0',
      positive: false,
      icon: Bell
    }
  ]);

  const [recentOrders, setRecentOrders] = useState<Order[]>([]);
  const [allOrders, setAllOrders] = useState<Order[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [ordersPerPage] = useState(10);
  const [isLoading, setIsLoading] = useState(true);
  const [isOrdersLoading, setIsOrdersLoading] = useState(true);
  const [isStatsLoading, setIsStatsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [ordersError, setOrdersError] = useState<string | null>(null);
  const [statsError, setStatsError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('orders');
  const [lastStatsUpdate, setLastStatsUpdate] = useState<number>(0);
  const [cachedStats, setCachedStats] = useState<ApiResponse<DashboardStats> | null>(null);
  const [showReceiptModal, setShowReceiptModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [receiptUrl, setReceiptUrl] = useState<string | null>(null);
  const [confirmingPayOnDelivery, setConfirmingPayOnDelivery] = useState(false);

  // Helper functions
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('en-UG', {
      style: 'currency',
      currency: 'UGX',
      minimumFractionDigits: 0
    }).format(price);
  };

  const handleSignOut = () => {
    logout();
    navigate('/');
  };

  const generateReceiptPDF = (order: Order, shouldDownload: boolean = false) => {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    let yPos = margin;

    // Function to center text
    const centerText = (text: string, y: number) => {
      const textWidth = pdf.getStringUnitWidth(text) * pdf.getFontSize() / pdf.internal.scaleFactor;
      return (pageWidth - textWidth) / 2;
    };

    // Add Logo
    const logoWidth = 40;
    const logoHeight = 40;
    const logoX = (pageWidth - logoWidth) / 2;
    pdf.addImage('/edumall-logo.png', 'PNG', logoX, yPos, logoWidth, logoHeight);
    yPos += logoHeight + 10;

    // Header
    pdf.setFontSize(24);
    pdf.setTextColor(0, 128, 128);
    pdf.text('EDUMALL', centerText('EDUMALL', yPos), yPos);
    yPos += 10;

    pdf.setFontSize(12);
    pdf.setTextColor(128, 128, 128);
    const tagline = 'Your trusted education partner';
    pdf.text(tagline, centerText(tagline, yPos), yPos);
    yPos += 20;

    // Reset text color to black
    pdf.setTextColor(0, 0, 0);

    // Customer and Order Details section
    pdf.setFillColor(247, 247, 247);
    pdf.rect(margin, yPos, pageWidth - (margin * 2), 50, 'F');
    yPos += 10;

    pdf.setFontSize(11);
    const orderNumber = `Order #${order.id.toString().padStart(5, '0')}`;
    pdf.text(orderNumber, margin + 5, yPos);
    
    const dateStr = new Date(order.created_at).toLocaleDateString('en-UG', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    pdf.text(dateStr, pageWidth - margin - 5 - pdf.getStringUnitWidth(dateStr) * pdf.getFontSize() / pdf.internal.scaleFactor, yPos);
    yPos += 10;

    // Payment Status with colored background
    const status = order.payment_status.toUpperCase();
    const statusColor = order.payment_status === 'paid' ? [0, 170, 0] : [255, 170, 0];
    pdf.setFillColor(statusColor[0], statusColor[1], statusColor[2]);
    const statusWidth = pdf.getStringUnitWidth(status) * pdf.getFontSize() / pdf.internal.scaleFactor + 10;
    pdf.roundedRect(margin + 5, yPos - 6, statusWidth, 10, 2, 2, 'F');
    pdf.setTextColor(255, 255, 255);
    pdf.text(status, margin + 10, yPos);
    pdf.setTextColor(0, 0, 0);
    yPos += 20;

    // Items table
    yPos += 10;
    const tableData = order.items.map(item => [
      item.product.name,
      item.quantity.toString(),
      formatPrice(item.price),
      formatPrice(item.price * item.quantity)
    ]);

    autoTable(pdf, {
      startY: yPos,
      head: [['Item', 'Qty', 'Price', 'Total']],
      body: tableData,
      theme: 'grid',
      headStyles: { 
        fillColor: [0, 128, 128],
        fontSize: 10,
        fontStyle: 'bold'
      },
      styles: { 
        fontSize: 9,
        cellPadding: 5
      },
      columnStyles: {
        0: { cellWidth: 'auto' },
        1: { cellWidth: 30, halign: 'center' },
        2: { cellWidth: 40, halign: 'right' },
        3: { cellWidth: 40, halign: 'right' }
      }
    });

    const finalY = (pdf as unknown as { lastAutoTable: { finalY: number } }).lastAutoTable.finalY;
    yPos = finalY + 20;

    // Totals section
    const subTotal = order.total;
    pdf.setFontSize(10);
    pdf.text('Subtotal:', pageWidth - margin - 80, yPos);
    pdf.text(formatPrice(subTotal), pageWidth - margin - 5, yPos, { align: 'right' });
    yPos += 10;

    pdf.setFontSize(12);
    pdf.setFont(undefined, 'bold');
    pdf.text('Total:', pageWidth - margin - 80, yPos);
    pdf.text(formatPrice(order.total), pageWidth - margin - 5, yPos, { align: 'right' });
    yPos += 30;

    // Footer
    pdf.setFont(undefined, 'normal');
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    const thankYouMsg = 'Thank you for shopping with Edumall!';
    pdf.text(thankYouMsg, centerText(thankYouMsg, pageHeight - margin), pageHeight - margin);

    if (shouldDownload) {
      pdf.save(`receipt-order-${order.id}.pdf`);
      toast.success('Receipt downloaded successfully!');
    } else {
      const pdfDataUri = pdf.output('datauristring');
      setReceiptUrl(pdfDataUri);
      setSelectedOrder(order);
      setShowReceiptModal(true);
    }
  };

  const confirmDeliveryReceived = async (orderId: number) => {
    try {
      setConfirmingPayOnDelivery(true);
      const token = localStorage.getItem('token');
      const response = await axios.post<ApiResponse>(
        `https://edumall-main-khkttx.laravel.cloud/api/checkout/confirm-pay-on-delivery`,
        { order_id: orderId },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.data.order?.payment_status === 'paid') {
        toast.success('Payment confirmed successfully! âœ…');
        
        setAllOrders(prev =>
          prev.map(order =>
            order.id === orderId
              ? { ...order, payment_status: 'paid' }
              : order
          )
        );

        setRecentOrders(prev =>
          prev.map(order =>
            order.id === orderId
              ? { ...order, payment_status: 'paid' }
              : order
          )
        );
      } else {
        toast.error('Failed to confirm payment. Please try again.');
      }
    } catch (error) {
      console.error('Confirmation failed:', error);
      toast.error('Something went wrong while confirming payment.');
    } finally {
      setConfirmingPayOnDelivery(false);
    }
  };

  // Receipt Preview Modal component
  const ReceiptPreviewModal = () => {
    if (!showReceiptModal || !receiptUrl || !selectedOrder) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl shadow-xl max-w-3xl w-full max-h-[90vh] flex flex-col">
          <div className="p-4 border-b border-gray-200 flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900">
              Receipt Preview - Order #{selectedOrder.id.toString().padStart(5, '0')}
            </h3>
            <button
              onClick={() => setShowReceiptModal(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              <X size={20} />
            </button>
          </div>
          
          <div className="flex-1 overflow-auto p-4">
            <iframe
              src={receiptUrl}
              className="w-full h-full min-h-[60vh] border-0"
              title="Receipt Preview"
            />
          </div>
          
          <div className="p-4 border-t border-gray-200 flex justify-end space-x-4">
            <button
              onClick={() => setShowReceiptModal(false)}
              className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg"
            >
              Close
            </button>
            <button
              onClick={() => {
                generateReceiptPDF(selectedOrder, true);
                setShowReceiptModal(false);
              }}
              className="px-4 py-2 bg-teal-500 text-white rounded-lg hover:bg-teal-600 flex items-center gap-2"
            >
              <Download size={16} />
              Download PDF
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Render sections
  const renderOverview = () => (
    <div className="space-y-8">
      {/* Stats Cards */}
      {error || ordersError || statsError ? (
        <div className="glass-strong rounded-2xl p-6 space-y-2">
          {error && <p className="text-red-600">{error}</p>}
          {ordersError && <p className="text-orange-600">{ordersError}</p>}
          {statsError && <p className="text-orange-600">{statsError}</p>}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {isLoading ? (
            // Loading skeletons for stats
            Array(4).fill(null).map((_, index) => (
              <div key={index} className="glass-medium rounded-2xl p-6 animate-pulse">
                <div className="h-8 w-8 bg-gray-200 rounded-full mb-4"></div>
                <div className="h-6 w-24 bg-gray-200 rounded mb-2"></div>
                <div className="h-4 w-16 bg-gray-200 rounded"></div>
              </div>
            ))
          ) : (
            stats.map((stat, index) => (
              <motion.div
                key={stat.label}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="glass-medium rounded-2xl p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <stat.icon className="w-8 h-8 text-teal-600" />
                  <span className={`text-sm font-medium px-2 py-1 rounded-full ${
                    stat.positive ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'
                  }`}>
                    {stat.change}
                  </span>
                </div>
                <p className="text-2xl font-bold text-gray-900 mb-1">{stat.value}</p>
                <p className="text-sm text-gray-600">{stat.label}</p>
              </motion.div>
            ))
          )}
        </div>
      )}
      {/* Recent Orders */}
      <div className="glass-strong rounded-2xl p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900">Recent Orders</h2>
          <EdumallButton 
            variant="ghost" 
            size="sm"
            onClick={() => setActiveTab('orders')}
          >
            View All
          </EdumallButton>
        </div>
        
        <div className="space-y-4">
          {/* Order filters */}
          <div className="flex gap-2 mb-4">
            <select 
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              onChange={(e) => {
                const filtered = allOrders.filter(order => 
                  e.target.value === 'all' ? true : order.payment_status === e.target.value
                );
                setRecentOrders(filtered);
              }}
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="paid">Paid</option>
            </select>
          </div>

          {isLoading ? (
            // Loading skeletons
            Array(3).fill(null).map((_, index) => (
              <div key={index} className="flex items-center justify-between p-4 glass-medium rounded-xl animate-pulse">
                <div className="space-y-2">
                  <div className="h-5 w-24 bg-gray-200 rounded"></div>
                  <div className="h-4 w-32 bg-gray-200 rounded"></div>
                </div>
                <div className="text-right space-y-2">
                  <div className="h-5 w-20 bg-gray-200 rounded"></div>
                  <div className="h-4 w-16 bg-gray-200 rounded"></div>
                </div>
              </div>
            ))
          ) : error ? (
            <div className="text-center py-4">
              <p className="text-red-600">{error}</p>
            </div>
          ) : recentOrders.length === 0 ? (
            <div className="text-center py-4">
              <p className="text-gray-600">No orders found</p>
            </div>
          ) : (
            recentOrders.map((order) => (
              <div key={order.id} className="flex items-center justify-between p-4 glass-medium rounded-xl">
                <div>
                  <p className="font-medium text-gray-900">#{order.id.toString().padStart(3, '0')}</p>
                  <p className="text-sm text-gray-600">
                    {new Date(order.created_at).toLocaleDateString()} â€¢ {order.items.length} items
                  </p>
                  <p className="text-sm text-gray-500">
                    {order.items.map(item => item.product.name).join(', ')}
                  </p>
                </div>
                <div className="text-right">
                  <p className="font-semibold text-gray-900">{formatPrice(order.total)}</p>
                  <span className={`text-xs px-2 py-1 rounded-full ${
                    order.payment_status === 'paid' ? 'bg-green-100 text-green-600' : 'bg-yellow-100 text-yellow-600'
                  }`}>
                    {order.payment_status.charAt(0).toUpperCase() + order.payment_status.slice(1)}
                  </span>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  // Main render
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50">
      <CustomCursor />
      <Navbar />
      <ReceiptPreviewModal />
      <main className="pt-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
              Welcome back, {user?.firstName || user?.lastName || 'User'}
            </h1>
            <p className="text-lg text-gray-600">
              Manage your orders, track deliveries, and discover new products
            </p>
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Sidebar */}
            <div className="lg:col-span-1">
              <div className="glass-strong rounded-2xl p-6 sticky top-24">
                <nav className="space-y-2">
                  {sidebarItems.map((item) => (
                    <button
                      key={item.id}
                      onClick={() => setActiveTab(item.id)}
                      className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl text-left transition-colors ${
                        activeTab === item.id
                          ? 'bg-teal-500 text-white'
                          : 'text-gray-600 hover:bg-gray-100'
                      }`}
                    >
                      <item.icon size={20} />
                      {item.label}
                    </button>
                  ))}
                  <button 
                    onClick={handleSignOut}
                    className="w-full flex items-center gap-3 px-4 py-3 rounded-xl text-left text-red-600 hover:bg-red-50 transition-colors mt-6"
                  >
                    <LogOut size={20} />
                    Sign Out
                  </button>
                </nav>
              </div>
            </div>
            {/* Main Content */}
            <div className="lg:col-span-3">
              {activeTab === 'overview' && renderOverview()}
              {activeTab === 'badges' && renderBadges()}
              {activeTab === 'profile' && renderProfile()}
              {activeTab === 'settings' && renderSettings()}
              {activeTab === 'orders' && renderOrders()}
              {activeTab === 'billing' && renderBilling()}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;
